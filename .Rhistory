help <- data.frame(x =rnorm(10), y = rnorm(10))
save <- xyplot(help)
save <- xyplot(x, y, data = help)
save <- xyplot(help, x, y)
xyplot(x~y, help)
save <- xyplot(x~y, help)
class(save)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
?transform
transform(airquality, Month = factor(Month))
airquality <- transform(airquality, Month = factor(Month))
class(airquality$Month)
library("swirl")
swirl()
nxt()
nxt()
library(tidyr)
nxt()
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout= c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout= c(5,1))
p <- xyplot(Ozone~Wind, airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile(pathotofile = "plot1.R", local = TRUE)
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
library(swirl)
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5,.5))
plot(x, y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
cols
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(vulcano, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = "mpg")
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(displ, hwy, color = drv)
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~. , binwidth = 2)
library(swirl)
swirl()
qplot(data - displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot( mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth( method = "lm")
g + geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 4, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv)) + them_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, tpye="l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y= myy))
g + geom_line()
g + geom_line()+ ylim(-3,3)
g + geom_line()+ coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color= factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x= "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/20)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = lm)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- cut(diamonds$carat, seq(0,1, length=4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot()+ facet_grid(.~cut)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=.4, col = "red")
5
5
0
12
abline(h=0.5, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
plot(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col= cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col= cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
points(x,y, col = kmObj$cluster, pch = 19, cex = 2)
plot(x,y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x,y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% matv
matu * matv
svd(mat)
matu %*% diag %*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
haed(constantMatrix)
head(constantMatrix)
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd$d
svd2$d
dim(faceData)
svd1$v[,1] %*% svd1$u[,1] * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- svd1$u[,1:2] %*% svd1$d[1:""] %*% t(svd1$v[,1:2])
a1 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
svd1$u[1:2] %*% svd1$d[1:2] %*% svd1[, 1:2]
svd1$u[1:2] %*% svd1$d[] %*% svd1[, 1:2]
svd1$u[1:2] %*% svd1$d %*% svd1[, 1:2]
svd1$u[] %*% svd1$d %*% svd1[, 1:2]
svd1$u[] %*% svd1$d %*% svd1[]
svd1$u[,] %*% svd1$d %*% svd1[,]
svd1$u[1,2] %*% svd1$d %*% svd1[,]
svd1$u[1,2] %*% svd1$d %*% svd1[1,2]
help()
a2 <- svd1$u[, 1:2] %*% svd1$d[1:2] %*% t(svd1$v[, 1:2])
a2 <- svd1$u[, 1:2] %*% svd1$d[,1:2] %*% t(svd1$v[, 1:2])
a2 <- svd1$u[, 1:2] %*% svd1%d[1:2]
a2 <- svd1$u[, 1:2] %*% svd1$d[1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a5 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, boolean = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1, x[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, - c(562:563)]))
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,1:4])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(563, 564)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size == 29
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab =  "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab =  "Walkdown Cluster")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
trainindicator <- rbinom(4601, size = 1, prob = 0.5)
trainSpam = spam[trainindicator == 1,]
testspam = spam[trainindicator == 0,]
names(trainSpam)
head(trainSpam)
setwd("~/Rath/Coursera_ProgrammingAssignment/Course5/Assignment1/RepData_PeerAssessment1")
unzip("activity.zip")
activitydata <- read.csv("activity.csv")
summary(activitydata)
head(activitydata)
tail(activitydata)
activitydataEachDay <- aggregate(steps ~ date, data = activitydata, FUN = sum, na.rm = "true")
head(activitydataEachDay)
activitydataEachDay <- aggregate(steps ~ date, data = activitydata, FUN = sum)
head(activitydataEachDay)
tail(activitydataEachDay)
?aggregate
library(ggplot2)
?qplot
qplot(activitydataEachDay$steps, geom = "histogram", main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$date, geom = "histogram", main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$steps, activitydataEachDay$date, geom = "histogram", main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$steps, activitydataEachDay$date, main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$date, activitydataEachDay$steps, main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$steps, geom = "histogram", main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "day")
hist(activitydataEachDay$steps, main = "Steps taken per day", xlab = "day")
hist(activitydataEachDay$date, main = "Steps taken per day", xlab = "day")
hist(activitydataEachDay$steps, main = "Steps taken per day", xlab = "day")
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps")
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 15)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 50)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 60)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 100)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 200)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 500)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps", binwidth = 1000)
mean(activitydataEachDay$steps)
median(activitydataEachDay$steps)
activitydataInterval <- aggregate(steps ~ interval, data = activitydata, FUN = mean)
head(activitydataInterval)
dim(activitydataInterval)
tail(activitydataInterval)
qplot(activitydataInterval$interval, activitydataInterval$steps,main = "Average daily steps", xlab = "interval",ylab = "steps")
qplot(activitydataInterval$interval, activitydataInterval$steps,main = "Average daily steps", xlab = "interval",ylab = "steps", geom = "line")
max(activitydataEachDay$steps)
activitydataInterval$interval[max(activitydataEachDay$steps) = activitydataInterval$steps]
activitydataInterval$interval[max(activitydataEachDay$steps) == activitydataInterval$steps]
activitydataInterval[1, max(activitydataInterval$steps) == activitydataInterval$steps]
max(activitydataInterval$steps) == activitydataInterval$steps
sum(max(activitydataInterval$steps) == activitydataInterval$steps)
selection <- max(activitydataInterval$steps) == activitydataInterval$steps
activitydataInterval$interval[selection]
is.na(activitydata)
is.na.data.frame(activitydata)
save <- is.na.data.frame(activitydata)
sum(save)
View(save)
sum(save$steps)
save$steps
class(save)
save <- is.na(activitydata)
class(save)
sapply(activitydata, function(x) sum(is.na(x)))
activitydataEachDay2 <- aggregate(steps ~ date, data = activitydata, FUN = min)
head(activtydataEachDay2)
head(activitydataEachDay2)
activitydataEachDay2 <- aggregate(steps ~ date, data = activitydata, FUN = mean)
head(activitydataEachDay2)
NewActivtyData <- activitydata
save[1,2]
save[1,]
save[,1]
save <- is.na(activitydata$steps)
WhereValuesAreMissing <- activitydata[save]
WhereValuesAreMissing <- activitydata[save,]
head(WhereValuesAreMissing)
WhereValuesAreMissing$steps <- activitydataEachDay2$steps[WhereValuesAreMissing$date == activitydataEachDay2$date]
library(dplyr)
?mutate
NewActivtyData %>% mutate(steps = if_else(is.na(steps), activitydataEachDay2$steps[activitydataEachDay2$date == date], steps))
activitydataEachDay2$steps[activitydataEachDay2$date == WhereValuesAreMissing$date[1]]
activitydataEachDay2$steps[activitydataEachDay2$date == WhereValuesAreMissing$date[2]]
activitydataEachDay2$date == WhereValuesAreMissing$date
activitydataEachDay2$date == WhereValuesAreMissing$date[2]
sum(activitydataEachDay2$date == WhereValuesAreMissing$date[2])
WhereValuesAreMissing$date[2]
NewActivtyData[date = "2012-10-01"]
NewActivtyData[date = level("2012-10-01")]
NewActivtyData <- activitydata
activitydataEachDay2[activitydataEachDay2$date == NewActivtyData$date[2]]
activitydataEachDay2[activitydataEachDay2$date == NewActivtyData$date[2],]
class(NewActivtyData$date[2])
NewActivtyData$date[2]
NewActivtyData$date[,2]
activitydataEachDay2$date[1]
activitydataEachDay2$date[0]
activitydataEachDay2$date[2]
head(activitydataEachDay2$date)
activitydata[activitydata$date == activitydata$date[1]]
activitydata[activitydata$date == activitydata$date[1],]
activitydata[activitydataEachDay$date == activitydata$date[1],]
activitydata[activitydataEachDay$date == activitydata$date[2],]
activitydata[activitydataEachDay$date == activitydata$date[289],]
activitydataEachDay[activitydataEachDay$date == activitydata$date[289],]
head(activitydataInterval)
tail(activitydataInterval)
NewActivtyData <- activitydata
mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], steps))
mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.integer(steps)))
if_else(is.na(NewActivtyData$steps), activitydataInterval$steps[activitydataInterval$interval == NewActivtyData[2]], NewActivtyData$steps)
activitydataInterval$steps[activitydataInterval$interval == NewActivtyData$interval[2]]
if_else(is.na(NewActivtyData$steps), activitydataInterval$steps[activitydataInterval$interval == NewActivtyData$interval[2]], NewActivtyData$steps)
?if_else
if_else(is.na(NewActivtyData$steps), activitydataInterval$steps[activitydataInterval$interval == NewActivtyData$interval[2]], as.numeric(NewActivtyData$steps)
)
mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(steps)))
NewActivityData <- mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(steps)))
sum(is.na(NewActivityData))
sapply(NewActivityData, function(x) is.na(x))
sapply(NewActivityData, function(x) sum(is.na(x))
)
sapply(activitydata, function(x) sum(is.na(x)))
if_else(is.na(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval], as.numeric(activitydata$steps))
help <- if_else(is.na(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval], as.numeric(activitydata$steps))
sum(is.na(help))
help(is.na(help))
help[is.na(help)]
is.na(as.numeric(activitydata$steps))
sum(is.na(as.numeric(activitydata$steps))9
sum(is.na(as.numeric(activitydata$steps)))
sum(is.na(activitydataInterval$interval))
activitydata$interval[activitydata$date[1] == activitydata$date]
NewActivityData <- mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(steps)))
NewActivityData[is.na(NewActivityData)]
sum(NewActivityData[is.na(NewActivityData)])
sum(is.na(NewActivityData))
NewActivityData[is.na(NewActivityData),]
NewActivityData <- mutate(NewActivtyData, steps = if_else(is.na(steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(steps), activitydataInterval$steps[activitydataInterval$interval == interval]))
sum(is.na(NewActivityData))
hmm <- if_else(is.na(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == interval])
hmm <- if_else(is.na(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == interval], as.numeric(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval])
hmm <- if_else(is.na(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval], as.numeric(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval])
sum(is.na(hmm))
hmm <- if_else(activitydata$steps, as.numeric(activitydata$steps), as.numeric(activitydata$steps), activitydataInterval$steps[activitydataInterval$interval == activitydata$interval])
hmm <- sapply(NewActivityData, function(x) if(is.na(x)) {x$steps <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval])})
hmm <- sapply(NewActivityData, function(x) if(is.na(x)) {x$steps <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
hmm
hmm <- sapply(NewActivityData, function(x) if(is.na(x$steps)) {x$steps <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
hmm <- sapply(NewActivityData$steps, function(x) if(is.na(x$steps)) {x$steps <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
hmm <- sapply(NewActivityData$steps, function(x) if(is.na(x)) {x <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
sum(is.na(hmm))
hmm
hmm <- sapply(NewActivityData$steps, function(x) if(is.na(x)) {x <- 11})
head(hmm)
class(hmm)
hmm <- sapply(NewActivityData, function(x) if(is.na(x)) {x <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
MakeSomething <- NewActivityData$steps
hmm <- sapply(MakeSomething, function(x) if(is.na(x)) {x <- activitydataInterval$steps[activitydataInterval$interval == activitydata$interval]})
head(hmm)
row(NewActivityData)
imputed_data <- transform(activitydata, steps = ifelse(is.na(activitydata$steps), activitydataInterval$steps[match(activitydata$interval, activitydataInterval$interval)], activitydata$steps))
sum(is.na(imputed_data))
activitydataEachDay <- aggregate(steps ~ date, data = imputed_data, FUN = sum)
qplot(activitydataEachDay$steps, main = "Steps taken per day", xlab = "steps")
mean(activitydataEachDay$steps)
median(activitydataEachDay$steps)
head(activitydataEachDay)
activitydataEachDay$steps[1] <- 0
head(activitydataEachDay)
mean(activitydataEachDay$steps)
median(activitydataEachDay$steps)
